function [detJ, Na, normal] = FaceQuadShape(ElementType, localCoord, xi)
% [detJ, Na, normal] = FaceQuadShape(ElementType, localCoord, xi)
% Inputs:
%   ElementType = 'P12D' or 'Q12D'
%   localCoord: nDimEm * nNodesElement
%       where nDimEm is the embedding dimension with nDimEm > nDim
%   xi: nDim * nQuad
% Outputs:
%   detJ: 1 * nQuad
%   Na: nNodesElement * nQuad
%   normal: nDimEm * nQuad (defined only when nDimEm = nDim + 1
% Intermediates:
%   dNa_dxi, dNa_deta: nNodesElement * nQuad
%   tangents, tangent1, tangent2: nDimEm * nQuad

nDim = size(xi, 1);
nDimEm = size(localCoord, 1);
nQuad = size(xi, 2);
nNodesElement = size(localCoord, 2);
switch ElementType
    case 'P11D'
        Na = [(1-xi)/2; (1+xi)/2];
        dNa_dxi = repmat([-1/2; 1/2], 1, length(xi));
    case 'P21D'
        Na = [xi.*(xi-1)/2;(1+xi).*(1-xi); xi.*(xi+1)/2];
        dNa_dxi = [(2*xi-1)/2;-2*xi;(2*xi+1)/2];
    case 'P21D'
        Na = [xi(1,:).*(2*xi(1,:)-1);...
              xi(2,:).*(2*xi(2,:)-1);...
             (1-xi(1,:)-xi(2,:)).*(1-2*xi(1,:)-2*xi(2,:));...
              4*xi(1,:).*xi(2,:);...
              4*xi(2,:).*(1-xi(1,:)-xi(2,:));...
              4*xi(1,:).*(1-xi(1,:)-xi(2,:))];
        dNa_dxi = [4*xi(1,:)-1; ...
            zeros(1,size(xi,2)); ...
            4*(xi(1,:)+xi(2,:))-3; ...
            4*xi(2,:); ...
            -4*xi(2,:); ...
            4*(1-2*xi(1,:)-xi(2,:))];
      dNa_deta = [zeros(1,size(xi,2)); ...
            4*xi(2,:)-1; ...
            4*(xi(1,:)+xi(2,:))-3; ...
            4*xi(1,:); ...
            4*(1-xi(1,:)-2*xi(2,:)); ...
            -4*xi(1,:)];  
    case 'Q12D'
        Na = [(1-xi(1,:)).*(1-xi(2,:))/4; ...
            (1+xi(1,:)).*(1-xi(2,:))/4; ...
            (1+xi(1,:)).*(1+xi(2,:))/4; ...
            (1-xi(1,:)).*(1+xi(2,:))/4];
        dNa_dxi = [-(1-xi(2,:))/4; ...
            (1-xi(2,:))/4; ...
            (1+xi(2,:))/4; ...
            -(1+xi(2,:))/4];
        dNa_deta = [-(1-xi(1,:))/4; ...
            -(1+xi(1,:))/4; ...
            (1+xi(1,:))/4; ...
            (1-xi(1,:))/4];
end

switch nDim
    case 1
        tangents = localCoord * dNa_dxi;
        detJ = sqrt(sum(tangents.^2));
        normal = [tangents(2,:)./detJ; -tangents(1,:)./detJ];
    case 2
        tangent1 = localCoord * dNa_dxi;
        tangent2 = localCoord * dNa_deta;
        ndA = cross(tangent1, tangent2);
        detJ = sqrt(sum(ndA.^2));
        normal = [ndA(1,:)./detJ; ndA(2,:)./detJ; ndA(3,:)./detJ];
end